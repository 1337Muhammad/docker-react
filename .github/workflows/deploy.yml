name: Docker CI/CD

on:
  push:
    branches:
      - master  # Change this to the branch you want to trigger the deployment from

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout your code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Build Docker image
      - name: Build Docker image
        run: docker build -t my-app -f Dockerfile.dev .

      # Step 3: Run tests in the Docker container
      - name: Run tests
        run: docker run -e CI=true my-app npm run test

  deploy:
    runs-on: ubuntu-latest
    needs: build  # This ensures deploy runs only if build and tests pass

    steps:
      # Step 1: Checkout your code again
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  # Optional, or hardcode your region here

      # Step 3: Deploy to Elastic Beanstalk
      - name: Deploy to Elastic Beanstalk
        run: |
          # Ensure AWS Elastic Beanstalk CLI is installed
          pip install awsebcli

          # Initialize EB and deploy
          eb init my-app --platform docker --region ${{ secrets.AWS_REGION }}  # Replace `my-app` with your actual Elastic Beanstalk app name
          eb use Frontend-env  # Replace `my-env` with your environment name
          eb deploy
